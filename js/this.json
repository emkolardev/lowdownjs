{
	'title': '"This" (and events)',
	'text':	
	'Imagine the following scenario:+There"s a rock on the ground. You kick it a few inches to the left while saying, "This is in my way."+In that situation, we can think of your kick (just the action itself: you swung your leg until it hit something) as an event. You could have done something else- hit, jumped, walked another direction, etc- but in this case you kicked, so we"ll call it the kick-event.+That event had an effect on the world: it made a rock move from point A to point B. If someone asked you, "How did that rock move to a different spot?", you"d be able to reference the kick-event by telling them "The rock moved only after I kicked it." Or someone watching from nearby could have seen you kick it, and maybe they were startled by the sudden movement.+Additionally, the kick-event was targeting an object: the rock. When you said, "This is in my way," you were referencing the rock. It could have been something else on the ground- a stick, a box, etc- but this time it was the rock.+Lastly, just by having existed, your kick-event has certain properties. It had a speed, an angle, and a certain amount of force, among many other things. The rock also has certain properties by existing. For example, it has a color, a hardness level, a circumference, and a weight.+If you can imagine that scenario, you now understand concepts in JavaScript related to events and "this".+JavaScript, by design, responds to an event by performing the callback function you"ve specified in the event-listener. By default, it passes in a reference to the event as the first argument. So when we say:+object.addEventListener("click", function(event) { //code });+The "event" variable can be used inside that function to reference the event and its properties. You could also name it "fred" or "xyz123" or any other valid variable name, but "event" (or "evt", "e", etc) tends to be the most clear.',
	'date': '2-15-2016',
	'category': 'general'
}